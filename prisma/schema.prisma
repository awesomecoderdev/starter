// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol", "fullTextSearch", "fullTextIndex", "filteredRelationCount"]
}

// user section

model User {
  id       String  @id @default(cuid())
  name     String?
  email    String? @unique
  avatar   String?
  publicId String?
  street   String?
  city     String?
  region   String?
  zip      String?
  country  String?

  websites Website[]
  posts    Post[]

  usage             Int     @default(0)
  usageLimit        Int     @default(10)
  plan              String  @default("free")
  stripeId          String? @unique // Stripe subscription ID
  billingCycleStart Int? // day of the month when the billing cycle starts
  settings          String?  @db.LongText

  createdAt DateTime @default(now())
  @@fulltext([settings])
}

model Website {
  id        String @id @default(cuid())
  userId    String
  websiteId String
  name      String
  url       String @unique
  key       String @unique // key of the link (e.g. /github) â€“ also stored on Redis
  endpoint  String @db.LongText

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([url, key])
  @@index([userId])
  @@index([websiteId])
  @@fulltext([endpoint])
}

model Post {
  id          String  @id @default(cuid())
  websiteId   String
  userId      String
  post_id     String
  title       String? // OG title for the link (e.g. Dub - Open-Source Bitly Alternative)
  description String? @db.VarChar(280) // OG description for the link (e.g. An open-source link management tool for modern marketing teams to create, share, and track short links.)
  endpoint    String  @db.LongText

  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  plagiarisms Plagiarism[]

  // Website metadata
  scanned   Boolean  @default(false) // whether to show public stats or not
  scannedAt DateTime @updatedAt

  @@index([websiteId])
  @@index([userId])
  @@fulltext([endpoint])
}

model Plagiarism {
  id         String @id @default(cuid())
  postId     String
  url        String
  percentage String

  // Website who created the Website
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  scannedAt DateTime @updatedAt

  @@index(postId)
}
