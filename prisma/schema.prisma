// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol","fullTextSearch","fullTextIndex","filteredRelationCount"]
}


// user section
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts       Account[]
  sessions       Session[]
  projects       Project[]
  sentEmails     SentEmail[]
  websites       Website[]

  createdAt      DateTime       @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id                  String          @id @default(cuid())
  name                String
  slug                String          @unique
  logo                String?

  usage               Int             @default(0)
  usageLimit          Int             @default(1000)
  plan                String          @default("free")
  stripeId            String?         @unique // Stripe subscription ID
  billingCycleStart   Int?            // day of the month when the billing cycle starts

  user                User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String?

  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  @@index([userId])
}

enum EmailType {
  firstDomainInvalidEmail
  secondDomainInvalidEmail
  firstUsageLimitEmail
  secondUsageLimitEmail
}

model SentEmail {
  id                  String    @id @default(cuid())
  type                EmailType
  createdAt           DateTime  @default(now())
  user                User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String?

  @@index([userId])
}

model Website {
  id                  String    @id @default(cuid())
  domain              String    // domain of the link (e.g. dub.sh) – also stored on Redis
  key                 String    // key of the link (e.g. /github) – also stored on Redis
  endpoint            String    @db.LongText // target url (e.g. https://github.com/steven-tey/dub) – also stored on Redis
  archived            Boolean   @default(false) // whether the link is archived or not
  password            String? // password to access the link – also stored on Redis

  title               String? // OG title for the link (e.g. Dub - Open-Source Bitly Alternative)
  description         String? @db.VarChar(280) // OG description for the link (e.g. An open-source link management tool for modern marketing teams to create, share, and track short links.)

  // User who created the Website
  user                User?   @relation(fields: [userId], references: [id])
  userId              String?

  // Website metadata
  scaned              Int      @default(0) // number of clicks
  publicStats         Boolean  @default(false) // whether to show public stats or not
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt


  @@unique([domain, key])
  @@index(password)
  @@index(createdAt(sort: Desc))
  @@index(scaned(sort: Desc))
  @@index(userId)
  @@fulltext([key, endpoint])
}
