import { Header } from "@/components/Header";
import "./globals.css";
import { Inter } from "next/font/google";
import { Layout } from "@/components/Layout";
import { NextRequest } from "next/server";

// const inter = Inter({ subsets: ["latin"] });

export const metadata = {
	title: "Starter - Next 13.4 Template",
	description: "Generated by create next app",
};

const modeScript = `
  let darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)')

  updateMode()
  darkModeMediaQuery.addEventListener('change', updateModeWithoutTransitions)
  window.addEventListener('storage', updateModeWithoutTransitions)

  function updateMode() {
    let isSystemDarkMode = darkModeMediaQuery.matches
    let isDarkMode = window.localStorage.isDarkMode === 'true' || (!('isDarkMode' in window.localStorage) && isSystemDarkMode)

    if (isDarkMode) {
      document.documentElement.classList.add('dark')
    } else {
      document.documentElement.classList.remove('dark')
    }

    if (isDarkMode === isSystemDarkMode) {
      delete window.localStorage.isDarkMode
    }
  }

  function disableTransitionsTemporarily() {
    document.documentElement.classList.add('[&_*]:!transition-none')
    window.setTimeout(() => {
      document.documentElement.classList.remove('[&_*]:!transition-none')
    }, 0)
  }

  function updateModeWithoutTransitions() {
    disableTransitionsTemporarily()
    updateMode()
  }
`;

export default function RootLayout({
	children,
}: {
	children: React.ReactNode;
}) {
	return (
		<html lang="en">
			<head>
				<script dangerouslySetInnerHTML={{ __html: modeScript }} />
				{/* Tell the browser to never restore the scroll position on load */}
				<script
					dangerouslySetInnerHTML={{
						__html: `history.scrollRestoration = "manual"`,
					}}
				/>
			</head>
			<body className="bg-white antialiased dark:bg-zinc-900">
				<Layout>{children}</Layout>
			</body>
		</html>
	);
}
